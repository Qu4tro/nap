#!/usr/bin/env python
import string
import sys
import argparse
import time

from datetime import timedelta, date, datetime
from datetime import time as dttime


# ##################### Argparser ########################

# Thank you, unutbu:
# http://stackoverflow.com/questions/4042452/display-help-message-with-python-argparse-when-script-is-called-without-any-argu
class MyParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: {}\n'.format(message))
        self.print_help()
        sys.exit(2)

# ##################### Parsing Time #####################


def convert_to_timedelta(time_str):
    """
    Returns a timedelta given a string
    """
    def convert_to_dict(time_str):
        """
        Returns a dictionary with the number of seconds, minutes and hours
        >>> t1 = convert_to_dict("1h3s")
        >>> t1['h'] == 1 and t1['s'] == 3 and len(t1) == 2
        True
        >>> t2 = convert_to_dict("1h1m1s")
        >>> t2['h'] == 1 and t2['m'] == 1 and t2['s'] == 1 and len(t2) == 3
        True
        >>> t3 = convert_to_dict("1s")
        >>> t3['s'] == 1 and len(t3) == 1
        True
        """
        units = {'s': 0, 'm': 0, 'h': 0}
        for unit in units:
            if unit in time_str:
                unit_index = time_str.index(unit)
                i = 1
                while time_str[unit_index - i] in string.digits:
                    units[unit] += int(time_str[unit_index - i]) * 10**(i - 1)
                    i += 1

        return units

    time_dict = convert_to_dict(time_str)
    return timedelta(hours=time_dict['h'],
                     minutes=time_dict['m'],
                     seconds=time_dict['s'])


# ##################### Sleep calculator #####################


def nap_for(time_delta):
    now = datetime.now()
    then = now + time_delta

    return then


def nap_until(time_delta):

    def time_to_wait(time_delta):
        now = datetime.now()
        midnight = datetime.combine(date.today(), dttime(0))
        then = midnight + time_delta
        if now > then:
            then += timedelta(days=1)

        return then - now

    return nap_for(time_to_wait(time_delta))


# ##################### Preparing output #####################

def print_exact_relative_time(now, then):

    def str_exact_time(now, then):

        if now.day == then.day:
            day = 'today'
        elif (now + timedelta(days=1)).day == then.day:
            day = 'tomorrow'
        else:
            day = then.date()

        exact_time = "{:02d}:{:02d}:{:02d} of {}".format(then.hour,
                                                         then.minute,
                                                         then.second,
                                                         day)

        return exact_time

    def str_relative_time(now, then):

        total = (then - now).total_seconds()

        total_hours = int(total // 3600)
        total_minutes = int((total - (total_hours * 3600)) // 60)
        total_seconds = int(
            total - (total_hours * 3600) - (total_minutes * 60))

        if total_hours and total_minutes and total_seconds:
            out = "{} hours, {} minutes and {} seconds".format(total_hours,
                                                               total_minutes,
                                                               total_seconds)
        elif total_hours and total_minutes:
            out = "{} hours and {} minutes".format(total_hours,
                                                   total_minutes)
        elif total_hours and total_seconds:
            out = "{} hours and {} seconds".format(total_hours,
                                                   total_seconds)
        elif total_minutes and total_seconds:
            out = "{} minutes and {} seconds".format(total_minutes,
                                                     total_seconds)
        elif total_hours:
            out = "{} hours".format(total_hours)
        elif total_minutes:
            out = "{} minutes".format(total_minutes)
        elif total_seconds:
            out = "{} seconds".format(total_seconds)

        out += '({} seconds)'.format(round(total))

        return out

    relative_time = str_relative_time(now, then)
    exact_time = str_exact_time(now, then)

    print("Waking up in {}, at {}".format(relative_time, exact_time))


# ##################### Sleep #####################

def nap(now, then, poll):

    seconds_to_sleep = (then - now).total_seconds()

    if poll:

        # Bonus :D Uncomment code below to enjoy ;)
        # rtcwake is a unix utility that wakes up your computer
        # More info: http://linux.die.net/man/8/rtcwake

        """
        import subprocess
        import os
        time_it_takes_to_wakeup = 3
        seconds_until_wakeup_call = str(round(seconds_to_sleep -
                                              time_it_takes_to_wakeup))
        with open(os.devnull) as null:
            subprocess.call(['rtcwake', '-m', 'no', '-s',
                            seconds_until_wakeup_call],
                            stdout=null, stderr=null)
        """

        while 1:
            time.sleep(1)
            if datetime.now() > then:
                break
    else:
        time.sleep(seconds_to_sleep)


# ##################### Main #####################

def parse_command_line():

    example = """Example:
    nap for 1h10m
    nap for 1s1m
    nap for 30s
    nap until 9h23m10s
    nap -q until 14h
    nap -0 until 9h23m10s"""

    noformat = argparse.RawDescriptionHelpFormatter
    parser = MyParser(formatter_class=noformat,
                      description='Sleep tight :)',
                      epilog=example)

    parser.add_argument('--quiet', '-q', action='store_true',
                        help="No output")
    parser.add_argument('--dry-run', '-0', action='store_true',
                        help="Only output")
    parser.add_argument('--poll-time', '-p', action='store_true',
                        help=("Instead of sleeping the entire time, "
                              "checks every second if the given time "
                              "has arriven."))

    subparser = parser.add_subparsers(dest='subcommand')
    subparser.required = True

    parser_list = subparser.add_parser('for',
                                       help='Sleep for the given time')

    parser_list = subparser.add_parser('until',
                                       help='Sleep until the given time')

    parser.add_argument('time', action='store',
                        help="Time values postfixed by their respective units\
 separated by nothing")

    return parser.parse_args()


def main():

    args = parse_command_line()

    time_delta = convert_to_timedelta(args.time)
    now = datetime.now()

    if args.subcommand == 'for':
        then = nap_for(time_delta)
    elif args.subcommand == 'until':
        then = nap_until(time_delta)

    if not(args.quiet):
        print_exact_relative_time(now, then)

    if not(args.dry_run):
        nap(now, then, args.poll_time)

    # This programs ends here. Good morning ;)

if __name__ == '__main__':
    main()
